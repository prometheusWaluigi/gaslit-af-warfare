# GASLIT-AF WARSTACK Dockerfile with Intel OneAPI and Arc A770 GPU support
# A modular simulation-and-exposure engine optimized for Intel hardware

# Use Intel's OneAPI base image
FROM intel/oneapi-basekit:2023.2.0-devel-ubuntu22.04

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PYTHONPATH=/app \
    DEBIAN_FRONTEND=noninteractive \
    ONEAPI_ROOT=/opt/intel/oneapi \
    DPCPP_ROOT=/opt/intel/oneapi/compiler/latest \
    LEVEL_ZERO_ROOT=/opt/intel/oneapi/level_zero/latest \
    MKLROOT=/opt/intel/oneapi/mkl/latest \
    TBBROOT=/opt/intel/oneapi/tbb/latest \
    ONEAPI_DEVICE_SELECTOR=level_zero:gpu

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    git \
    curl \
    python3-pip \
    python3-dev \
    python3-setuptools \
    python3-wheel \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set up Intel OneAPI environment
RUN echo "source /opt/intel/oneapi/setvars.sh" >> /root/.bashrc

# Create a script to set up Intel environment variables for non-interactive sessions
RUN echo '#!/bin/bash\n\
source /opt/intel/oneapi/setvars.sh > /dev/null\n\
exec "$@"' > /usr/local/bin/with_intel && \
    chmod +x /usr/local/bin/with_intel

# Copy requirements file
COPY requirements.txt .

# Install Python dependencies with Intel optimizations
RUN with_intel pip install --upgrade pip && \
    with_intel pip install -r requirements.txt && \
    with_intel pip install scikit-allel==1.3.13 biopython>=1.79 && \
    with_intel pip install pytest pytest-mock && \
    with_intel pip install intel-extension-for-pytorch && \
    with_intel pip install numpy --force-reinstall --no-binary numpy && \
    with_intel pip install scipy --force-reinstall --no-binary scipy && \
    with_intel pip install scikit-learn --force-reinstall --no-binary scikit-learn

# Install spaCy model
RUN with_intel python3 -m spacy download en_core_web_sm

# Create a test script to verify scikit-allel is properly installed and importable
RUN echo 'import sys; print("Python version:", sys.version); import allel; print("scikit-allel version:", allel.__version__); import Bio; print("biopython version:", Bio.__version__); import numpy as np; print("NumPy version:", np.__version__); import torch; print("PyTorch available:", torch.cuda.is_available() if hasattr(torch, "cuda") else "N/A"); print("Intel Extension for PyTorch:", "Available" if "intel_extension_for_pytorch" in sys.modules else "Not available")' > test_imports.py

# Run the test script to verify imports work
RUN with_intel python3 test_imports.py

# Create necessary directories
RUN mkdir -p results logs uploads data/testimonies data/genomes data/vcf \
    static/img/biological static/img/genetic static/img/institutional static/img/legal

# Copy project files
COPY . .

# Create a patch to fix the import issue in genetic_scanner.py
RUN echo "import sys; sys.modules['scikit_allel'] = __import__('allel')" > src/genetic_risk/import_fix.py && \
    echo "from src.genetic_risk.import_fix import *" | cat - src/genetic_risk/genetic_scanner.py > temp && \
    mv temp src/genetic_risk/genetic_scanner.py

# Add Intel hardware acceleration to the biological modeling module
RUN echo "# Enable Intel hardware acceleration\nimport os\nos.environ['ONEAPI_DEVICE_SELECTOR'] = 'level_zero:gpu'\nos.environ['USE_INTEL_EXTENSION'] = '1'" | cat - src/biological_modeling/neuroimmune_simulator.py > temp && \
    mv temp src/biological_modeling/neuroimmune_simulator.py

# Make scripts executable
RUN chmod +x gaslit-af-runner.py run_tests.py analyze_vcf.py fixed_analyze_vcf.py simulate_vcf_analysis.py

# Create a wrapper script to ensure Intel environment is set for all commands
RUN echo '#!/bin/bash\n\
source /opt/intel/oneapi/setvars.sh > /dev/null\n\
python3 "$@"' > /usr/local/bin/run_with_intel && \
    chmod +x /usr/local/bin/run_with_intel

# Expose port for web interface
EXPOSE 5000

# Set entrypoint to use the Intel environment
ENTRYPOINT ["/usr/local/bin/run_with_intel"]

# Default command - this can be overridden when running the container
CMD ["run_tests.py"]
